<?phprequire( __DIR__ . '/omoclass_common.php' );//. main loop//- サイクルごとループforeach ( glob( _fn2( 'profdb' ) ) as $fn_profdb ) {	$cycle = _numonly( basename( $fn_profdb ) );	if ( $cycle == 0 ) continue;	$fn_json = _fn2( 'info', $cycle );//	if ( file_exists( $fn_json ) ) continue;	_count( 10 );	$json = [ 'summary' => '' ];	//.. DBから読み込み (PCA)	$node_ids =[];	$obj = ( new cls_sqlite( $fn_profdb ) )		->q([ 'select' => [ 'id', 'pca1', 'pca2', 'pca3' ]]);	while ( true ) {		$data = $obj->fetchObject();		if ( $data === false ) break;		$json[ $data->id ][ 'pca' ] = [ $data->pca1, $data->pca2, $data->pca3 ];		$node_ids[] = $data->id;	}	//.. clsファイルから読み込み	foreach ( $node_ids as $node_id ) {		$tsv = _tload( _fn2( 'cls', $cycle, $node_id ) );		$json[ $node_id ][ 'stat' ] = _stat( $tsv );		arsort( $tsv );		$rank = 1;		foreach ( array_slice( $tsv, 0, 10 ) as $omo_id => $score ) {			$json[ $node_id ][ $rank ] = [				'id' => $omo_id ,				'sc' => $score 			];			++ $rank;		}	}	//.. avg / num	$score_stat = [];	$counts = [];	$avg = $min = $max = $sigma = $sum = 0;	foreach ( $node_ids as $node_id ) {		$ar = $json[ $node_id ][ 'stat' ];		$counts[] = $ar[ 'num' ];		$sum += $ar[ 'num' ];		$avg   += $ar[ 'avg' ]   * $ar[ 'num' ];		$sigma += $ar[ 'sigma' ] * $ar[ 'num' ];		$min = $min > $ar[ 'min' ] ? $ar[ 'min' ] : $min;		$max = $max < $ar[ 'max' ] ? $ar[ 'max' ] : $max;	}	$json[ 'summary' ] = [		'score' => [			'avg' => $avg / $sum ,			'sigma' => $sigma / $sum,			'min' => $min ,			'max' => $max 		] ,		'count' => _stat( $counts )	];	//.. save	_json_save( $fn_json, $json );	_m( json_encode( $json[ 'summary' ][ 'score' ], JSON_PRETTY_PRINT ) );}//. to PDBdefine( 'SPACE20', str_repeat( ' ', 20 ) );$all = '';foreach ( glob( _fn2( 'profdb' ) ) as $fn_profdb ) {	$cycle = _fn2num( $fn_profdb );	_count( 10 );	$pdb = '';	foreach (		( new cls_sqlite( $fn_profdb ) )->qar([ 'select' => ['pca1', 'pca2', 'pca3' ]]) 		as $num => $pcas	) {		extract( $pcas ); //- $pca1, $pca2, $pca3//		$p2 = ( $pca1 - $pca2 ) * 2;//		$p3 = ( $pca2 - $pca3 ) * 4;		//		_m([ $pca1, $pca2, $pca3 ]);		$line = 'ATOM';		foreach ([//			[  1,  6, 'ATOM'	] , //- ATOM / HETATM			[  7, 11, $num	    ] , //- atom id			[ 13, 16, 'CA'		] , //- type_symbol			[ 17, 17, ''		] , //- altloc			[ 18, 20, 'ASP'		] , //- compid			[ 22, 22, 'A'		] , //- chain-id; (chain-id)			[ 23, 26, $num   	] , //- seq-id			[ 27, 27, '' 		] , //- ins			[ 31, 38, _c($pca1) ] , //- x			[ 39, 46, _c($pca2) ] , //- y			[ 47, 54, _c($pca3) ] , //- z			[ 55, 60, ''		] , //- ocup			[ 61, 66, ''		] , //- temp			[ 77, 78, 'C'		] , //- elem			[ 79, 80, '' 		] , //- charge		] as $a ) {			$line = substr( $line . SPACE20, 0, $a[0] - 1 )				. substr( $a[2], 0, $a[1] - $a[0] + 1 );		}		$pdb .= $line . "\n";	}	$all .= 'MODEL        ' . (integer)$cycle ."\n" . $pdb . "ENDMDL\n" ;}file_put_contents( _fn2( 'nodes_pdb', 'all'  ), $all );file_put_contents( _fn2( 'nodes_pdb', 'last' ), $pdb );function _c( $x ) {	return substr( log( $x ) * 100, 0,7 );}//. functions//.. _tloadfunction _tload( $fn ) {	$ret = [];	foreach ( _file( $fn ) as $line ) {		list( $key, $val ) = explode( "\t", trim( $line ) );		$key = trim( $key );		$val = trim( $val );//		_pause( $key );//		_pause( $val );		if ( $val == '' ) continue;		$ret[ $key ] = $val;	}	return $ret;}