<?phprequire( __DIR__ . '/omoclass_common.php' );define( 'SPACE20', str_repeat( ' ', 20 ) );//. メインループ$all = '';foreach ( glob( _fn2( 'profdb' ) ) as $fn_profdb ) {	$cycle = _numonly( basename( $fn_profdb ) );	_count( 10 );//	_m( $cycle );//	_m( "Nodes PDBファイル作成, cycyle-$cycle" );	$pdb = '';	foreach (		( new cls_sqlite( $fn_profdb ) )->qar([ 'select' => ['pca1', 'pca2', 'pca3' ]]) 		as $num => $pcas	) {		extract( $pcas ); //- $pca1, $pca2, $pca3//		$p2 = ( $pca1 - $pca2 ) * 2;//		$p3 = ( $pca2 - $pca3 ) * 4;		//		_m([ $pca1, $pca2, $pca3 ]);		$line = 'ATOM';		foreach ([//			[  1,  6, 'ATOM'	] , //- ATOM / HETATM			[  7, 11, $num	    ] , //- atom id			[ 13, 16, 'CA'		] , //- type_symbol			[ 17, 17, ''		] , //- altloc			[ 18, 20, 'ASP'		] , //- compid			[ 22, 22, 'A'		] , //- chain-id; (chain-id)			[ 23, 26, $num   	] , //- seq-id			[ 27, 27, '' 		] , //- ins			[ 31, 38, _c($pca1) ] , //- x			[ 39, 46, _c($pca2) ] , //- y			[ 47, 54, _c($pca3) ] , //- z			[ 55, 60, ''		] , //- ocup			[ 61, 66, ''		] , //- temp			[ 77, 78, 'C'		] , //- elem			[ 79, 80, '' 		] , //- charge		] as $a ) {			$line = substr( $line . SPACE20, 0, $a[0] - 1 )				. substr( $a[2], 0, $a[1] - $a[0] + 1 );		}		$pdb .= $line . "\n";	}	$all .= 'MODEL        ' . ( (integer)$cycle ) ."\n" . $pdb . "ENDMDL\n" ;//	file_put_contents( $fn_nodespdb, $pdb );//	if ( $cycle == 50 ) break;}file_put_contents( _fn2( 'nodes_pdb', 'all'  ), $all );file_put_contents( _fn2( 'nodes_pdb', 'last' ), $pdb );function _c( $x ) {//	return substr( $x, 0, 7 );	return substr( log( $x ) * 100, 0,7 );}