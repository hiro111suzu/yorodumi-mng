<?phprequire( __DIR__ . '/omoclass_common.php' );//. サイクル番号決定define( 'FN_NODE_PROF', _fn_last( 'profdb' ) );define( 'CYCLE', _fn2num( FN_NODE_PROF ) + 1 );_line( 'classification', 'cycle #' . CYCLE );$dn = _fn2( 'dn_cls', CYCLE );_mkdir( $dn );exec( "rm -f $dn/* " );//. 検索$db_data = new cls_sqlite( FN_DB );$obj_all = $db_data->q(['select' => [ 'id', 'data' ]]);$db_node = new cls_sqlite( FN_NODE_PROF );define( 'COMP_PARAM', _get_comp_par() );//- データごとwhile(true){	_count( 1000 );	$data = $obj_all->fetchObject();	if ( $data === false ) break;	$prof_data = _bin2prof( $data->data );	//- 候補	foreach ( [ 0.7, 0.5, 0 ] as $f ) {		$obj_rep = $db_node->where( _filt( $data, $f ) )->q(['select' => [ 'id', 'data' ] ]);		$node = $obj_rep->fetchObject();		if ( $node === false ) continue;		break;	}	//- 分類	$max_id = 999; 	$max_score = -1;	while(true){		$score = _getscore( $prof_data, _bin2prof( $node->data ), COMP_PARAM );		if ( $max_score < $score ) {			$max_score = $score;			$max_id = $node->id;		}		$node = $obj_rep->fetchObject();		if ( $node === false ) break;	}//	_m( $max_id );	file_put_contents(		_fn2( 'cls', CYCLE, $max_id ),		$data->id ."\t". $max_score ."\n",		FILE_APPEND 	);}//. _filt: PCAでフィルタfunction _filt( $o, $filt_val ) {	if ( $filt_val == 0 ) return [];	$m1 = $o->pca1 * $filt_val;	$m2 = $o->pca2 * $filt_val;	$m3 = $o->pca3 * $filt_val;	$l1 = $o->pca1 / $filt_val;	$l2 = $o->pca2 / $filt_val;	$l3 = $o->pca3 / $filt_val;	return [		"$m1 < pca1", "pca1 < $l1",		"$m2 < pca2", "pca2 < $l2",		"$m3 < pca3", "pca3 < $l3",	];}